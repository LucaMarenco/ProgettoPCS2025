@startuml
title Poliedri Geodetici e loro Duale
left to right direction
skinparam linetype ortho

struct main

package "Triangolazione" {
    class file_vertici{
          + vector<Vector3d> points 
	  + map<array<int,3> , int> mappa_vertici
	  + int id_vertice
	  + ostream s_g_Cell0Ds
          + bool dual
  }

    class file_poliedro{
          + int V_s_g, L_s_g, F_s_g
          + ostream s_g_Cell3Ds
  }
}

package "Triangolazione.ClasseI" {
    class punti_triangolazione{
          + Vector3d A, B, C
          + int b
  }

    class file_lati{
          + vector<Vector3d> points
          + map<pair<array<int,3>, array<int,3>>, int> mappa_lati
	  + map<array<int,3> , int> mappa_vertici
	  + int id_lato
          + int b
	  + ostream s_g_Cell1Ds
          + bool dual
  }

    class file_facce{
          + vector<Vector3d> points
          + map<int, pair<Vector3i, Vector3i>> mappa_facce
          + map<pair<array<int,3>, array<int,3>>, int> mappa_lati
	  + map<array<int,3> , int> mappa_vertici
	  + int id_faccia
          + int b
  }
}

package "Triangolazione.ClasseII" {
    class calcola_intersezione{
          + Vector3d A, B, C, D
  }

    class punti_lungo_i_lati{
          + int b
          + Vector3d A, B, C, D
  }
    
    class punti_triangolazione_II{
          + Vector3d A, B, C
          + int b
  }

    class trova_k_punti_vicini{
          + Vector3d punto
          + vector<Vector3d> punti
          + size_t k
  }

    class file_lati_II{
          + vector<Vector3d> punti_unici
          + map<pair<array<int,3>, array<int,3>>, int> mappa_lati
	  + map<array<int,3> , int> mappa_vertici
	  + int id_lato
          + int b
	  + ostream s_g_Cell1Ds
          + bool dual
  }

    class getlatoID{
          + array<int,3> a
          + const array<int,3> b
          + const map<pair<array<int,3>, array<int,3>>, int> mappa_lati
  }

    class file_facce_II{
          + vector<Vector3d> punti_unici
	  + map<array< int, 3>, int> mappa_facce_2
	  + map<pair<array<int,3>, array<int,3>>, int> mappa_lati
	  + map<array<int,3> , int> mappa_vertici
          + int id_faccia
	  + int b
	  + ostream s_g_Cell2Ds
	  + map<int, pair<Vector3i, Vector3i>> mappa_facce
          + bool duale
  }
}

package "Triangolazione.Duale" {
    class lati_facce{
          + int L_s_g
          + map<int, pair<Vector3i, Vector3i>> mappa_facce
  }

    class file_vertici_duale{
          + int F_s_g
	  + map<int, pair<Vector3i, Vector3i>> mappa_facce
	  + map<array<int,3> , int> mappa_vertici
	  + map<array<int,3> , int> mappa_vertici_duale
          + ostream s_g_Cell0Ds
  }

    class file_lati_duale{
          + int L_s_g
          + map<int, Vector3d> mappa_baricentri
          + map<int, pair<Vector3i, Vector3i>> mappa_facce 
	  + map<array<int,3>, int> mappa_vertici_duale
	  + int id_lato
	  + ostream s_g_Cell1Ds
  }

    class file_facce_duale{
          + map<int, pair<Vector3i, Vector3i>> mappa_facce 
	  + map<pair<array<int,3>, array<int,3>>, int> mappa_lati_duale
	  + map<array<int,3> , int> mappa_vertici
	  + map< int, Vector3d> mappa_baricentri
	  + int id_faccia_duale
	  + ostream s_g_Cell2Ds
  }
}

package "Converter" {
    class Cell0DsConverter{
          +int V_s_g
          + map<array<int,3> , int> mappa_vertici
  }

    class Cell1DsConverter{
          + int L_s_g
          + map<array<int,3> , int> mappa_vertici
          + const map<pair<array<int,3>, array<int,3>>, int> mappa_lati
  }
}

package "CamminoMinimo" {
    class dijkstra{
          + int n
          + vector<vector<int>>& adiac_nodi
          + vector<vector<double>>& adiac_pesi
          + int start
          + int end
  }
}

main --> punti_triangolazione
main --> file_vertici
main --> file_lati
main --> file_facce
main --> file_poliedro
main --> punti_triangolazione_II
punti_triangolazione_II --> calcola_intersezione
punti_triangolazione_II --> punti_lungo_i_lati
main --> file_lati_II
file_lati_II --> trova_k_punti_vicini
main --> file_facce_II
file_facce_II --> getlatoID
main --> file_vertici_duale
file_vertici_duale --> punti_triangolazione_II
main --> file_lati_duale
file_lati_duale --> lati_facce
main --> file_facce_duale
main --> Cell0DsConverter
main --> Cell1DsConverter
main --> dijkstra
@enduml